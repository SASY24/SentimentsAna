import streamlit as st
import pandas as pd
from transformers import pipeline
import emoji
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
import json
import os

# Initialize session state
if 'history' not in st.session_state:
    st.session_state.history = []

# Load the sentiment analysis model
@st.cache_resource
def load_model():
    return pipeline('sentiment-analysis', model="poom-sci/WangchanBERTa-finetuned-sentiment")

sentiment_analyzer = load_model()

# Function to save analysis history
def save_analysis(text, sentiment, score):
    analysis = {
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'text': text,
        'sentiment': sentiment,
        'score': score
    }
    st.session_state.history.append(analysis)

# Function to get emoji based on score
def get_sentiment_emoji(score, sentiment):
    if sentiment == 'pos':
        if score > 0.8:
            return "ü§ó"
        elif score > 0.6:
            return "üòä"
        else:
            return "üôÇ"
    else:
        if score > 0.8:
            return "üò¢"
        elif score > 0.6:
            return "üòï"
        else:
            return "üôÅ"

# Main app
st.title("Advanced Thai Sentiment Analyzer ü§ñ")
st.markdown("---")

# Sidebar for additional features
with st.sidebar:
    st.header("Features")
    show_history = st.checkbox("Show Analysis History")
    show_stats = st.checkbox("Show Statistics")
    
# Main content area with tabs
tab1, tab2, tab3 = st.tabs(["Single Analysis", "Batch Analysis", "Learning Zone"])

with tab1:
    # Single text analysis
    text_input = st.text_area("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢...", height=100)
    
    if st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å", key="single_analysis"):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
            results = sentiment_analyzer([text_input])
            sentiment = results[0]['label']
            score = results[0]['score']
            
            # Save to history
            save_analysis(text_input, sentiment, score)
            
            # Display result with enhanced visuals
            col1, col2 = st.columns(2)
            
            with col1:
                if sentiment == 'pos':
                    st.success(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å {get_sentiment_emoji(score, sentiment)}")
                else:
                    st.error(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö {get_sentiment_emoji(score, sentiment)}")
                    
            with col2:
                # Create gauge chart
                fig = go.Figure(go.Indicator(
                    mode = "gauge+number",
                    value = score * 100,
                    domain = {'x': [0, 1], 'y': [0, 1]},
                    gauge = {
                        'axis': {'range': [0, 100]},
                        'bar': {'color': "darkblue"},
                        'steps': [
                            {'range': [0, 33], 'color': "lightgray"},
                            {'range': [33, 66], 'color': "gray"},
                            {'range': [66, 100], 'color': "darkgray"}
                        ],
                    },
                    title = {'text': "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"}
                ))
                st.plotly_chart(fig)

with tab2:
    # Batch analysis
    st.header("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô")
    batch_text = st.text_area(
        "‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô)",
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏à‡∏±‡∏á\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏ô‡∏ß‡∏¥‡πÄ‡∏®‡∏©",
        height=150
    )
    
    if st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        texts = batch_text.split('\n')
        results = sentiment_analyzer(texts)
        
        # Create results DataFrame
        df = pd.DataFrame({
            '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': texts,
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å': [r['label'] for r in results],
            '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô': [r['score'] for r in results]
        })
        
        # Display results in a nice table
        st.dataframe(df.style.background_gradient(subset=['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô']))
        
        # Show distribution chart
        fig = px.pie(df, names='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å', title='‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å')
        st.plotly_chart(fig)

with tab3:
    # Learning zone
    st.header("üéì ‡πÇ‡∏ã‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ")
    
    # Example sentences
    examples = {
        "‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ": "pos",
        "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏à‡∏±‡∏á‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡πâ‡∏ß": "neg",
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å": "pos",
        "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "neg"
    }
    
    st.subheader("‚úçÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à")
    selected_example = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:", list(examples.keys()))
    
    user_guess = st.radio("‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ô‡∏µ‡πâ:", ['pos', 'neg'])
    
    if st.button("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
        if user_guess == examples[selected_example]:
            st.success("üéâ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å")
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        # Show model's analysis
        result = sentiment_analyzer([selected_example])[0]
        st.info(f"‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI: {result['label']} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result['score']:.2f})")

# Display history if enabled
if show_history:
    st.markdown("---")
    st.header("üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    if st.session_state.history:
        history_df = pd.DataFrame(st.session_state.history)
        st.dataframe(history_df)
        
        # Download button for history
        csv = history_df.to_csv(index=False)
        st.download_button(
            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (CSV)",
            data=csv,
            file_name="sentiment_history.csv",
            mime="text/csv"
        )
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

# Show statistics if enabled
if show_stats and st.session_state.history:
    st.markdown("---")
    st.header("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    history_df = pd.DataFrame(st.session_state.history)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Sentiment distribution over time
        fig = px.line(history_df, x='timestamp', y='score', color='sentiment',
                     title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤')
        st.plotly_chart(fig)
    
    with col2:
        # Sentiment distribution pie chart
        fig = px.pie(history_df, names='sentiment',
                    title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
        st.plotly_chart(fig)
